/* This file was generated by asn1gen */

package moo.codec.ASNEXAMPLES;

import org.asn1gen.runtime.java.*;

import static org.asn1gen.runtime.java.Statics.*;

import moo.model.ASNEXAMPLES.*;
import static org.asn1gen.runtime.java.BerToAsn.*;
import static moo.codec.ASNEXAMPLES.BerToAsn.*;

@SuppressWarnings("unused")
public class ShadowBerToAsn {

  public static BerWriter decodePart_(final Books value) throws AsnException {
    BerWriter dataWriter = BerWriter.EMPTY;

    for (final Book item: value.items) {
      dataWriter = dataWriter.then(decode(item));
    }

    return dataWriter;
  }

  public static BerWriter decode_(final Books value) throws AsnException {
    final BerWriter dataWriter = decodePart(value);

    return BerWriter.EMPTY.tag(AsnClass.UNIVERSAL, AsnForm.CONSTRUCTED, 17).length(dataWriter.length).then(dataWriter);
  }

  public static BerWriter decodePart_(final BookPrice value) throws AsnException {
    return BerWriter.EMPTY
        .then(decode(value.isbn))
        .then(decode(value.price));
  }

  public static BerWriter decode_(final BookPrice value) throws AsnException {
    final BerWriter dataWriter = decodePart(value);

    return BerWriter.EMPTY.tag(AsnClass.UNIVERSAL, AsnForm.CONSTRUCTED, 17).length(dataWriter.length).then(dataWriter);
  }

  public static BerWriter decodePart_(final BookPrices value) throws AsnException {
    BerWriter dataWriter = BerWriter.EMPTY;

    for (final Book item: value.items) {
      dataWriter = dataWriter.then(decode(item));
    }

    return dataWriter;
  }

  public static BerWriter decode_(final BookPrices value) throws AsnException {
    final BerWriter dataWriter = decodePart(value);

    return BerWriter.EMPTY.tag(AsnClass.UNIVERSAL, AsnForm.CONSTRUCTED, 17).length(dataWriter.length).then(dataWriter);
  }

  public static BerWriter decodePart_(final BookCover value) throws AsnException {
    return decodePart(value.value);
  }

  public static BerWriter decode_(final BookCover value) throws AsnException {
    final BerWriter dataWriter = decodePart(value.value);

    return BerWriter.EMPTY.tag(AsnClass.UNIVERSAL, AsnForm.PRIMITIVE, 10).length(dataWriter.length).then(dataWriter);
  }

  public static BerWriter decodePart_(final Book value) throws AsnException {
    return BerWriter.EMPTY
        .then(decode(value.isbn))
        .then(decode(value.title))
        .then(decode(value.author))
        .then(decode(value.cover))
        .then(decode(value.isInPrint));
  }

  public static BerWriter decode_(final Book value) throws AsnException {
    final BerWriter dataWriter = decodePart(value);

    return BerWriter.EMPTY.tag(AsnClass.UNIVERSAL, AsnForm.CONSTRUCTED, 17).length(dataWriter.length).then(dataWriter);
  }

  public static BerWriter decodePart_(final Journals value) throws AsnException {
    BerWriter dataWriter = BerWriter.EMPTY;

    for (final Journal item: value.items) {
      dataWriter = dataWriter.then(decode(item));
    }

    return dataWriter;
  }

  public static BerWriter decode_(final Journals value) throws AsnException {
    final BerWriter dataWriter = decodePart(value);

    return BerWriter.EMPTY.tag(AsnClass.UNIVERSAL, AsnForm.CONSTRUCTED, 17).length(dataWriter.length).then(dataWriter);
  }

  public static BerWriter decodePart_(final Item value) throws AsnException {
    switch (value.choiceId()) {
    case 1:
      return decodePart((Book)value.element());
    case 2:
      return decodePart((Journal)value.element());
    default:
      throw new AsnException();
    }
  }

  public static BerWriter decode_(final Item value) throws AsnException {
    final BerWriter dataWriter = decode(value);

    return BerWriter.EMPTY.tag(AsnClass.UNIVERSAL, AsnForm.PRIMITIVE, value.choiceId()).length(dataWriter.length).then(dataWriter);
  }

  public static BerWriter decodePart_(final Journal value) throws AsnException {
    return BerWriter.EMPTY
        .then(decode(value.title))
        .then(decode(value.edition));
  }

  public static BerWriter decode_(final Journal value) throws AsnException {
    final BerWriter dataWriter = decodePart(value);

    return BerWriter.EMPTY.tag(AsnClass.UNIVERSAL, AsnForm.CONSTRUCTED, 17).length(dataWriter.length).then(dataWriter);
  }

  public static BerWriter decodePart_(final Items value) throws AsnException {
    BerWriter dataWriter = BerWriter.EMPTY;

    for (final Item item: value.items) {
      dataWriter = dataWriter.then(decode(item));
    }

    return dataWriter;
  }

  public static BerWriter decode_(final Items value) throws AsnException {
    final BerWriter dataWriter = decodePart(value);

    return BerWriter.EMPTY.tag(AsnClass.UNIVERSAL, AsnForm.CONSTRUCTED, 17).length(dataWriter.length).then(dataWriter);
  }
}
